1 2
3 4
tromino1 : 2->1->3 (works as gap maker)
tromino2 : 1->3->4 (works as gap maker)
tromino3 : 3->4->2 (works as gap remover)
tromino4 : 1->2->4 (works as gap remover)

normalchoice1 -> adding a domino(verical), it will not create any gap, go to i + 1
normalchoice2 -> adding dominoes(horizontal) in pairs, it will not create any gap, go to i + 2
normalchoice3 -> adding a tromino1/ tromino2 it will create a gap, go to i + 2

NOTE : you have to consider normalchoice3 two times, because -
there will be situation where you can use tromino1 OR tromino2

gapchoice1 -> adding a domino(horizontal) to fill the prev gap but it will create a gap
gapchoice2 -> adding a tromino3 / tromino4 to fill the prev gap but it will not create any gap

NOTE : you have to consider gapchoice2 only one time, because -

(1) there will no situation where you can tromino3 OR tromino4
(2) there will be ( a situation where you have to use tromino3 )
OR ( a situation where you have to use tromino4 )



BASIC RECURSIVE SOLUTION :


class Solution {
public:
    int mod = 1e9 + 7;
    int helper(int i,bool empty,int n) {
        if(i == n && !empty) return 1;
        if(i >= n) return 0;
        if(empty) {
            long gapchoice1 = helper(i + 1,true,n);
            long gapchoice2 = helper(i + 1,false,n);
            return (gapchoice1 + gapchoice2) % mod;
        }
        else {
            long normalchoice1 = helper(i + 1,false,n);
            long normalchoice2 = helper(i + 2,false,n);
            long normalchoice3 = helper(i + 2,true,n);
            return  (normalchoice1 + normalchoice2 + 2*normalchoice3) % mod;
        }
    }
    
    int numTilings(int n) {
        return helper(0,false,n);
    }
};



Time : O(3^N)
Space : O(N)










MEMOIZATION :

class Solution {
public:
    int mod = 1e9 + 7;
    int helper(int i,bool empty,int n,vector<vector<int>>& dp) {
        if(i == n && !empty) return 1;
        if(i >= n) return 0;
        if(dp[i][empty] != -1) return dp[i][empty];
        if(empty) {
            long gapchoice1 = helper(i + 1,true,n,dp);
            long gapchoice2 = helper(i + 1,false,n,dp);
            return dp[i][empty] = (gapchoice1 + gapchoice2) % mod;
        }
        else {
            long normalchoice1 = helper(i + 1,false,n,dp);
            long normalchoice2 = helper(i + 2,false,n,dp);
            long normalchoice3 = helper(i + 2,true,n,dp);
            return dp[i][empty] = (normalchoice1 + normalchoice2 + 2*normalchoice3) % mod;
        }
    }
    
    int numTilings(int n) {
        vector<vector<int>>dp(n,vector<int>(2,-1));
        return helper(0,false,n,dp);
    }
};




Time : O(N)
Space : O(N)





ITERATIVE SOLUTION (TABULATION) :


class Solution {
public:

    int numTilings(int n) {
        int mod = 1e9 + 7;
        vector<vector<int>>dp(n + 2,vector<int>(2,0));
        dp[n][0] = 1;
        
        for(int i = n - 1;i >= 0;i--) {
            for(int j = 1;j >= 0;j--) {
                if(j) {
                    long gapchoice1 = dp[i + 1][1];
                    long gapchoice2 = dp[i + 1][0];
                    dp[i][j] = (gapchoice1 + gapchoice2) % mod;
                }
                else {
                    long normalchoice1 = dp[i + 1][0];
                    long normalchoice2 = dp[i + 2][0];
                    long normalchoice3 = dp[i + 2][1];
                    dp[i][j] = (normalchoice1 + normalchoice2 + 2*normalchoice3) % mod;
                }
            }
        }
        return dp[0][0];
    }
};





Time : O(N)
Space : O(N)










ITERATIVE SOLUTION (SPACE OPTIMIZED) :

class Solution {
public:
    int numTilings(int n) {
        int mod = 1e9 + 7;
        vector<int>second(2,0);
        vector<int>first(2,0);
        vector<int>curr(2,0);
        first[0] = 1;
        for(int i = n - 1;i >= 0;i--) {
            for(int j = 1;j >= 0;j--) {
                if(j) {
                    long gapchoice1 = first[1];
                    long gapchoice2 = first[0];
                    curr[j] = (gapchoice1 + gapchoice2) % mod;
                }
                else {
                    long normalchoice1 = first[0];
                    long normalchoice2 = second[0];
                    long normalchoice3 = second[1];
                    curr[j] = (normalchoice1 + normalchoice2 + 2*normalchoice3) % mod;
                }
            }
            second = first;
            first = curr;
        }
        return first[0];
    }
};

Time : O(N)
Space : O(1)

